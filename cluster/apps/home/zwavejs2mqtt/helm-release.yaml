---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: zwavejs2mqtt
  namespace: home
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: zwavejs2mqtt
      version: 5.3.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  dependsOn:
    - name: emqx
      namespace: home
  values:
    image:
      repository: ghcr.io/zwave-js/zwavejs2mqtt
      tag: 6.15.1
    env:
      TZ: "Europe/Paris"
    securityContext:
      privileged: true
    service:
      main:
        annotations:
          prometheus.io/probe: "true"
          prometheus.io/protocol: http
        ports:
          http:
            port: 8091
          websocket:
            enabled: true
            port: 3000
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          hajimari.io/enable: "true"
          hajimari.io/icon: "resistor-nodes"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          external-dns/is-public: "true"
        hosts:
          - host: "zwavejs2mqtt.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - "zwavejs2mqtt.${SECRET_DOMAIN}"
    persistence:
      config:
        enabled: true
        existingClaim: zwavejs2mqtt-config-v1
        mountPath: "/usr/src/app/store"
      usb:
        enabled: true
        type: hostPath
        hostPath: /dev/serial/by-id/usb-0658_0200-if00
        hostPathType: CharDevice
    # podAnnotations:
    #   backup.velero.io/backup-volumes: config
    #   pre.hook.backup.velero.io/container: fsfreeze
    #   pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/usr/src/app/store"]'
    #   post.hook.backup.velero.io/container: fsfreeze
    #   post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/usr/src/app/store"]'
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                - key: feature.node.kubernetes.io/custom-zwave
                  operator: In
                  values:
                    - "true"
    # additionalContainers:
    #   fsfreeze:
    #     name: fsfreeze
    #     image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
    #     volumeMounts:
    #       - name: config
    #         mountPath: /usr/src/app/store
    #     securityContext:
    #       privileged: true
