---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: lidarr
  namespace: media
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: lidarr
      version: 14.2.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
  values:
    image:
      repository: ghcr.io/k8s-at-home/lidarr-nightly
      tag: v1.1.0.2639
    env:
      TZ: "${TIMEZONE}"
    ingress:
      main:
        enabled: true
        ingressClassName: "nginx"
        annotations:
          external-dns/is-public: "true"
          external-dns.alpha.kubernetes.io/target: "ipv4.${SECRET_DOMAIN}"
          nginx.ingress.kubernetes.io/auth-url: "http://authelia.networking.svc.cluster.local/api/verify"
          nginx.ingress.kubernetes.io/auth-signin: "https://login.${SECRET_DOMAIN}"
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/configuration-snippet: |
            proxy_set_header Accept-Encoding "";
            sub_filter '</head>' '<link rel="stylesheet" type="text/css" href="https://theme-park.${SECRET_PUBLIC_DOMAIN}/css/base/lidarr/nord.css"></head>';
            sub_filter_once on;
        hosts:
          - host: &host "lidarr.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    podSecurityContext:
      supplementalGroups:
        - 100
    metrics:
      enabled: true
      serviceMonitor:
        interval: 5m
        scrapeTimeout: 1m
      prometheusRule:
        enabled: false
      exporter:
        image:
          repository: ghcr.io/onedr0p/exportarr
          tag: v1.1.0
        env:
          port: 9794
          additionalMetrics: true
          unknownQueueItems: true
    persistence:
      config:
        enabled: true
        existingClaim: lidarr-config-v1
      media:
        enabled: true
        type: nfs
        server: ${NAS_ADDR}
        path: /volume1/music
        mountPath: /media
      downloads:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: ${NAS_ADDR}
            path: /volume1/downloads/complete
        mountPath: /downloads
      backup:
        enabled: true
        type: nfs
        server: ${NAS_ADDR}
        path: /volume1/CLOUDNATIVE1/Backups/lidarr
        mountPath: /config/Backups
    resources:
      requests:
        cpu: 10m
        memory: 250Mi
      limits:
        memory: 2000Mi
